(()=>{"use strict";class t{constructor(t,e){this.siteId=t,this.url=null!=e?e:"https://inuminate.com"}track(){return new Promise(((t,e)=>{fetch(this.endpoint("api/hit"),{method:"POST",body:JSON.stringify({s:this.siteId,l:window.location,h:this.hostname(),r:this.referer()}),headers:{"Content-Type":"application/json"}}).then((e=>{t(e)})).catch((t=>{console.error("Unable to track hit"),console.log(t),e(t)}))}))}endpoint(t){let e=this.url;"/"!==e[e.length-1]&&(e+="/");let n=t;return n&&"/"===n[0]&&(n=n.substring(1)),e+n}referer(){let t="";return document.referrer.indexOf(this.hostname())<0&&(t=document.referrer),t}hostname(){return window.location.hostname}}!function(){var e;const n=Array.from(document.getElementsByTagName("script")).filter((t=>!!t.dataset.inuminateSite))[0];if(!n)return;const r=n.dataset.inuminateSite,i=null!==(e=n.dataset.inuminateUrl)&&void 0!==e?e:null;new t(r,i).track()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW51bWluYXRlLmpzIiwibWFwcGluZ3MiOiJtQkFBZSxNQUFNQSxFQUtqQkMsWUFBYUMsRUFBZ0JDLEdBQ3pCQyxLQUFLRixPQUFTQSxFQUNkRSxLQUFLRCxJQUFNQSxNQUFBQSxFQUFBQSxFQUFPLHdCQUd0QkUsUUFDSSxPQUFPLElBQUlDLFNBQVEsQ0FBQ0MsRUFBU0MsS0FFekJDLE1BQU1MLEtBQUtNLFNBQVMsV0FBWSxDQUM1QkMsT0FBUSxPQUNSQyxLQUFNQyxLQUFLQyxVQUFVLENBQ2pCQyxFQUFHWCxLQUFLRixPQUNSYyxFQUFHQyxPQUFPQyxTQUNWQyxFQUFHZixLQUFLZ0IsV0FDUkMsRUFBR2pCLEtBQUtrQixZQUVaQyxRQUFTLENBQ0wsZUFBZ0Isc0JBRXJCQyxNQUFLQyxJQUNKbEIsRUFBUWtCLE1BQ1RDLE9BQU1DLElBQ0xDLFFBQVFDLE1BQU0sdUJBQ2RELFFBQVFFLElBQUlILEdBQ1puQixFQUFPbUIsU0FNbkJqQixTQUFVcUIsR0FDTixJQUFJNUIsRUFBTUMsS0FBS0QsSUFDWSxNQUF2QkEsRUFBSUEsRUFBSTZCLE9BQVEsS0FDaEI3QixHQUFPLEtBR1gsSUFBSThCLEVBQUtGLEVBS1QsT0FKTUUsR0FBZ0IsTUFBVkEsRUFBRyxLQUNYQSxFQUFLQSxFQUFHQyxVQUFVLElBR2YvQixFQUFNOEIsRUFHakJYLFVBRUksSUFBSWEsRUFBVyxHQUtmLE9BSklDLFNBQVNELFNBQVNFLFFBQVFqQyxLQUFLZ0IsWUFBYyxJQUM3Q2UsRUFBV0MsU0FBU0QsVUFHakJBLEVBR1hmLFdBQ0ksT0FBT0gsT0FBT0MsU0FBU0UsV0MxRC9CLFcsTUFDSSxNQUFNa0IsRUFBU0MsTUFBTUMsS0FBS0osU0FBU0sscUJBQXFCLFdBQVdDLFFBQU9KLEtBQVlBLEVBQU9LLFFBQVFDLGdCQUFlLEdBRXBILElBQUtOLEVBQ0QsT0FHSixNQUFNTyxFQUFPUCxFQUFPSyxRQUFRQyxjQUN0QnpDLEVBQWlDLFFBQTNCLEVBQUFtQyxFQUFPSyxRQUFRRyxvQkFBWSxRQUFJLEtBRXpCLElBQUk5QyxFQUFVNkMsRUFBTTFDLEdBQzVCRSxRQUlkMEMsSSIsInNvdXJjZXMiOlsid2VicGFjazovL0B0aGVwdWJsaWNnb29kL2ludW1pbmF0ZS8uL3NyYy9JbnVtaW5hdGUudHMiLCJ3ZWJwYWNrOi8vQHRoZXB1YmxpY2dvb2QvaW51bWluYXRlLy4vc3JjL3RyYWNrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEludW1pbmF0ZSB7XG5cbiAgICBzaXRlSWQ6IHN0cmluZztcbiAgICB1cmw6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yIChzaXRlSWQ6IHN0cmluZywgdXJsPzogc3RyaW5nfG51bGwpIHtcbiAgICAgICAgdGhpcy5zaXRlSWQgPSBzaXRlSWQ7XG4gICAgICAgIHRoaXMudXJsID0gdXJsID8/ICdodHRwczovL2ludW1pbmF0ZS5jb20nO1xuICAgIH1cblxuICAgIHRyYWNrICgpOiBQcm9taXNlPG9iamVjdD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICBmZXRjaCh0aGlzLmVuZHBvaW50KCdhcGkvaGl0JyksIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIHM6IHRoaXMuc2l0ZUlkLFxuICAgICAgICAgICAgICAgICAgICBsOiB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGg6IHRoaXMuaG9zdG5hbWUoKSxcbiAgICAgICAgICAgICAgICAgICAgcjogdGhpcy5yZWZlcmVyKCksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpXG4gICAgICAgICAgICB9KS5jYXRjaChyZWplY3RlZCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIHRyYWNrIGhpdCcpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlamVjdGVkKTtcbiAgICAgICAgICAgICAgICByZWplY3QocmVqZWN0ZWQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBlbmRwb2ludCAodXJpOiBzdHJpbmd8bnVsbCk6IHN0cmluZyB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybDtcbiAgICAgICAgaWYgKHVybFt1cmwubGVuZ3RoIC0xXSAhPT0gJy8nKSB7XG4gICAgICAgICAgICB1cmwgKz0gJy8nO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVwID0gdXJpO1xuICAgICAgICBpZiAoISFlcCAmJiBlcFswXSA9PT0gJy8nKSB7XG4gICAgICAgICAgICBlcCA9IGVwLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1cmwgKyBlcDtcbiAgICB9XG5cbiAgICByZWZlcmVyICgpOiBzdHJpbmd8bnVsbCB7XG5cbiAgICAgICAgbGV0IHJlZmVycmVyID0gJyc7XG4gICAgICAgIGlmIChkb2N1bWVudC5yZWZlcnJlci5pbmRleE9mKHRoaXMuaG9zdG5hbWUoKSkgPCAwKSB7XG4gICAgICAgICAgICByZWZlcnJlciA9IGRvY3VtZW50LnJlZmVycmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlZmVycmVyO1xuICAgIH1cblxuICAgIGhvc3RuYW1lICgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lO1xuICAgIH1cbn0iLCJpbXBvcnQgSW51bWluYXRlIGZyb20gJy4vSW51bWluYXRlJztcblxuZnVuY3Rpb24gaW5pdEludW1pbmF0ZSgpIHtcbiAgICBjb25zdCBzY3JpcHQgPSBBcnJheS5mcm9tKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKSkuZmlsdGVyKHNjcmlwdCA9PiAhIXNjcmlwdC5kYXRhc2V0LmludW1pbmF0ZVNpdGUpWzBdO1xuXG4gICAgaWYgKCFzY3JpcHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNpdGUgPSBzY3JpcHQuZGF0YXNldC5pbnVtaW5hdGVTaXRlITtcbiAgICBjb25zdCB1cmwgPSBzY3JpcHQuZGF0YXNldC5pbnVtaW5hdGVVcmwgPz8gbnVsbDtcblxuICAgIGNvbnN0IGludW1pbmF0ZSA9IG5ldyBJbnVtaW5hdGUoc2l0ZSwgdXJsKTtcbiAgICBpbnVtaW5hdGUudHJhY2soKTtcblxufVxuXG5pbml0SW51bWluYXRlKCk7XG4iXSwibmFtZXMiOlsiSW51bWluYXRlIiwiY29uc3RydWN0b3IiLCJzaXRlSWQiLCJ1cmwiLCJ0aGlzIiwidHJhY2siLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZldGNoIiwiZW5kcG9pbnQiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInMiLCJsIiwid2luZG93IiwibG9jYXRpb24iLCJoIiwiaG9zdG5hbWUiLCJyIiwicmVmZXJlciIsImhlYWRlcnMiLCJ0aGVuIiwicmVzcG9uc2UiLCJjYXRjaCIsInJlamVjdGVkIiwiY29uc29sZSIsImVycm9yIiwibG9nIiwidXJpIiwibGVuZ3RoIiwiZXAiLCJzdWJzdHJpbmciLCJyZWZlcnJlciIsImRvY3VtZW50IiwiaW5kZXhPZiIsInNjcmlwdCIsIkFycmF5IiwiZnJvbSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZmlsdGVyIiwiZGF0YXNldCIsImludW1pbmF0ZVNpdGUiLCJzaXRlIiwiaW51bWluYXRlVXJsIiwiaW5pdEludW1pbmF0ZSJdLCJzb3VyY2VSb290IjoiIn0=